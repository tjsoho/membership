generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String               @unique
  password            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  emailVerified       DateTime?
  image               String?
  isAdmin             Boolean              @default(false)
  courseAccess        CourseAccess[]
  passwordResetTokens PasswordResetToken[]
  purchases           Purchase[]
  workspaceItems      WorkspaceItem[]
}

model CourseAccess {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  active    Boolean  @default(true)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id              String          @id @default(cuid())
  title           String
  description     String
  image           String
  price           Float
  stripeProductId String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  courseAccess    CourseAccess[]
  purchases       Purchase[]
  workspaceItems  WorkspaceItem[]
}

model Purchase {
  id              String   @id @default(cuid())
  userId          String
  courseId        String
  paymentIntentId String   @unique
  purchaseSource  String   @default("INTERNAL")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
}

model WorkspaceItem {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  title     String
  type      String
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
}
